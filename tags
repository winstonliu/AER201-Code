!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BLACK	main/lib/legacy/photoLineDetection.h	13;"	d
BLACK	main/lib/sensing/sensor.h	13;"	d
BLUE	main/lib/grove/rgb_lcd.h	41;"	d
CALIBRATED	main/lib/legacy/photoLineDetection.h	15;"	d
EVENTMANAGER_EVENT_QUEUE_SIZE	main/lib/eventmanager/EventManager.h	49;"	d
EVENTMANAGER_LISTENER_LIST_SIZE	main/lib/eventmanager/EventManager.h	43;"	d
EVTMGR_DEBUG_PRINT	main/lib/eventmanager/EventManager.cpp	40;"	d	file:
EVTMGR_DEBUG_PRINT	main/lib/eventmanager/EventManager.cpp	45;"	d	file:
EVTMGR_DEBUG_PRINTLN	main/lib/eventmanager/EventManager.cpp	41;"	d	file:
EVTMGR_DEBUG_PRINTLN	main/lib/eventmanager/EventManager.cpp	46;"	d	file:
EVTMGR_DEBUG_PRINTLN_PTR	main/lib/eventmanager/EventManager.cpp	43;"	d	file:
EVTMGR_DEBUG_PRINTLN_PTR	main/lib/eventmanager/EventManager.cpp	48;"	d	file:
EVTMGR_DEBUG_PRINT_PTR	main/lib/eventmanager/EventManager.cpp	42;"	d	file:
EVTMGR_DEBUG_PRINT_PTR	main/lib/eventmanager/EventManager.cpp	47;"	d	file:
EventElement	main/lib/eventmanager/EventManager.h	/^        struct EventElement$/;"	s	class:EventManager::EventQueue
EventListener	main/lib/eventmanager/EventManager.h	/^class EventListener{$/;"	c
EventManager	main/lib/eventmanager/EventManager.cpp	/^EventManager::EventManager( SafetyMode safety ) : $/;"	f	class:EventManager
EventManager	main/lib/eventmanager/EventManager.h	/^class EventManager $/;"	c
EventManager_h	main/lib/eventmanager/EventManager.h	36;"	d
EventPriority	main/lib/eventmanager/EventManager.h	/^    enum EventPriority { kHighPriority, kLowPriority };$/;"	g	class:EventManager
EventQueue	main/lib/eventmanager/EventManager.cpp	/^EventManager::EventQueue::EventQueue( boolean beSafe ) :$/;"	f	class:EventManager::EventQueue
EventQueue	main/lib/eventmanager/EventManager.h	/^    class EventQueue $/;"	c	class:EventManager
EventType	main/lib/eventmanager/EventManager.h	/^    enum EventType $/;"	g	class:EventManager
GREEN	main/lib/grove/rgb_lcd.h	40;"	d
GenericCallable	main/lib/eventmanager/EventManager.h	/^    GenericCallable(F _f): f(_f) {};$/;"	f	class:GenericCallable
GenericCallable	main/lib/eventmanager/EventManager.h	/^class GenericCallable : public EventListener$/;"	c
IDLE	main/lib/nav/nav.h	/^	IDLE$/;"	e	enum:action
IRSensor	main/lib/sensing/irsensor.cpp	/^IRSensor::IRSensor(int sv, int nct):Sensor(sv), numCyclesTrack(nct) {};$/;"	f	class:IRSensor
IRSensor	main/lib/sensing/irsensor.h	/^class IRSensor: public Sensor$/;"	c
LCD_1LINE	main/lib/grove/rgb_lcd.h	85;"	d
LCD_2LINE	main/lib/grove/rgb_lcd.h	84;"	d
LCD_4BITMODE	main/lib/grove/rgb_lcd.h	83;"	d
LCD_5x10DOTS	main/lib/grove/rgb_lcd.h	86;"	d
LCD_5x8DOTS	main/lib/grove/rgb_lcd.h	87;"	d
LCD_8BITMODE	main/lib/grove/rgb_lcd.h	82;"	d
LCD_ADDRESS	main/lib/grove/rgb_lcd.h	33;"	d
LCD_BLINKOFF	main/lib/grove/rgb_lcd.h	73;"	d
LCD_BLINKON	main/lib/grove/rgb_lcd.h	72;"	d
LCD_CLEARDISPLAY	main/lib/grove/rgb_lcd.h	52;"	d
LCD_CURSORMOVE	main/lib/grove/rgb_lcd.h	77;"	d
LCD_CURSOROFF	main/lib/grove/rgb_lcd.h	71;"	d
LCD_CURSORON	main/lib/grove/rgb_lcd.h	70;"	d
LCD_CURSORSHIFT	main/lib/grove/rgb_lcd.h	56;"	d
LCD_DISPLAYCONTROL	main/lib/grove/rgb_lcd.h	55;"	d
LCD_DISPLAYMOVE	main/lib/grove/rgb_lcd.h	76;"	d
LCD_DISPLAYOFF	main/lib/grove/rgb_lcd.h	69;"	d
LCD_DISPLAYON	main/lib/grove/rgb_lcd.h	68;"	d
LCD_ENTRYLEFT	main/lib/grove/rgb_lcd.h	63;"	d
LCD_ENTRYMODESET	main/lib/grove/rgb_lcd.h	54;"	d
LCD_ENTRYRIGHT	main/lib/grove/rgb_lcd.h	62;"	d
LCD_ENTRYSHIFTDECREMENT	main/lib/grove/rgb_lcd.h	65;"	d
LCD_ENTRYSHIFTINCREMENT	main/lib/grove/rgb_lcd.h	64;"	d
LCD_FUNCTIONSET	main/lib/grove/rgb_lcd.h	57;"	d
LCD_MOVELEFT	main/lib/grove/rgb_lcd.h	79;"	d
LCD_MOVERIGHT	main/lib/grove/rgb_lcd.h	78;"	d
LCD_RETURNHOME	main/lib/grove/rgb_lcd.h	53;"	d
LCD_SETCGRAMADDR	main/lib/grove/rgb_lcd.h	58;"	d
LCD_SETDDRAMADDR	main/lib/grove/rgb_lcd.h	59;"	d
LINE_ISR	main/lib/nav/nav.h	/^	LINE_ISR,$/;"	e	enum:isr
ListenerItem	main/lib/eventmanager/EventManager.h	/^        struct ListenerItem$/;"	s	class:EventManager::ListenerList
ListenerList	main/lib/eventmanager/EventManager.cpp	/^EventManager::ListenerList::ListenerList() : $/;"	f	class:EventManager::ListenerList
ListenerList	main/lib/eventmanager/EventManager.h	/^    class ListenerList $/;"	c	class:EventManager
MOTOR_LEFT	main/lib/motor/motor.h	/^	MOTOR_LEFT,$/;"	e	enum:motor_states
MOTOR_LEFT	motor_test/src/motor.h	/^	MOTOR_LEFT,$/;"	e	enum:motor_states
MOTOR_OFF	main/lib/motor/motor.h	/^	MOTOR_OFF$/;"	e	enum:motor_states
MOTOR_OFF	motor_test/src/motor.h	/^	MOTOR_OFF$/;"	e	enum:motor_states
MOTOR_RIGHT	main/lib/motor/motor.h	/^	MOTOR_RIGHT,$/;"	e	enum:motor_states
MOTOR_RIGHT	motor_test/src/motor.h	/^	MOTOR_RIGHT,$/;"	e	enum:motor_states
MOVEFORWARD	main/lib/nav/nav.h	/^	MOVEFORWARD,$/;"	e	enum:action
MemberFunctionCallable	main/lib/eventmanager/EventManager.h	/^    MemberFunctionCallable() {};$/;"	f	class:MemberFunctionCallable
MemberFunctionCallable	main/lib/eventmanager/EventManager.h	/^    MemberFunctionCallable(C* _obj,memberf_pointer _f):obj(_obj),f(_f) {};$/;"	f	class:MemberFunctionCallable
MemberFunctionCallable	main/lib/eventmanager/EventManager.h	/^class MemberFunctionCallable : public EventListener$/;"	c
Motor	motor_test/src/motor.cpp	/^Motor::Motor(int pin_enable, int pin_direction)$/;"	f	class:Motor
Motor	motor_test/src/motor.h	/^class Motor$/;"	c
NEGATIVE	main/lib/pid/pid.h	/^const bool NEGATIVE = 0;$/;"	v
OFF	main/lib/pid/pid.h	/^const bool OFF = 0;$/;"	v
ON	main/lib/pid/pid.h	/^const bool ON = 1;$/;"	v
ON_WHITE	main/lib/pid/line_pid.h	/^const int ON_WHITE = false;$/;"	v
PID	main/lib/pid/pid.cpp	/^PID::PID(int& in, const int& set, int& out, double p, double i, double d, bool res)$/;"	f	class:PID
PID	main/lib/pid/pid.h	/^class PID {$/;"	c
POSITIVE	main/lib/pid/pid.h	/^const bool POSITIVE = 1;$/;"	v
PhotoLineDetection	main/lib/legacy/photoLineDetection.cpp	/^PhotoLineDetection::PhotoLineDetection(int newSensorPin)$/;"	f	class:PhotoLineDetection
PhotoLineDetection	main/lib/legacy/photoLineDetection.h	/^class PhotoLineDetection$/;"	c
PhotoLineDetection_h	main/lib/legacy/photoLineDetection.h	7;"	d
PhotoThresholdValues	main/lib/legacy/photoLineDetection.h	/^struct PhotoThresholdValues$/;"	s
RED	main/lib/grove/rgb_lcd.h	39;"	d
RED	main/lib/legacy/photoLineDetection.h	14;"	d
RED	main/lib/sensing/sensor.h	14;"	d
REG_BLUE	main/lib/grove/rgb_lcd.h	45;"	d
REG_GREEN	main/lib/grove/rgb_lcd.h	44;"	d
REG_MODE1	main/lib/grove/rgb_lcd.h	47;"	d
REG_MODE2	main/lib/grove/rgb_lcd.h	48;"	d
REG_OUTPUT	main/lib/grove/rgb_lcd.h	49;"	d
REG_RED	main/lib/grove/rgb_lcd.h	43;"	d
RGB_ADDRESS	main/lib/grove/rgb_lcd.h	34;"	d
ROTATETO	main/lib/nav/nav.h	/^	ROTATETO,$/;"	e	enum:action
SafetyMode	main/lib/eventmanager/EventManager.h	/^    enum SafetyMode { kNotInterruptSafe, kInterruptSafe };$/;"	g	class:EventManager
Sensor	main/lib/sensing/sensor.cpp	/^Sensor::Sensor(int pin) $/;"	f	class:Sensor
Sensor	main/lib/sensing/sensor.h	/^class Sensor$/;"	c
TOUCH_ISR	main/lib/nav/nav.h	/^	TOUCH_ISR$/;"	e	enum:isr
UNKNOWN	main/lib/sensing/sensor.h	15;"	d
WHITE	main/lib/grove/rgb_lcd.h	38;"	d
WHITE	main/lib/legacy/photoLineDetection.h	12;"	d
WHITE	main/lib/sensing/sensor.h	12;"	d
__RGB_LCD_H__	main/lib/grove/rgb_lcd.h	27;"	d
_currline	main/lib/grove/rgb_lcd.h	/^  uint8_t _numlines,_currline;$/;"	m	class:rgb_lcd
_displaycontrol	main/lib/grove/rgb_lcd.h	/^  uint8_t _displaycontrol;$/;"	m	class:rgb_lcd
_displayfunction	main/lib/grove/rgb_lcd.h	/^  uint8_t _displayfunction;$/;"	m	class:rgb_lcd
_displaymode	main/lib/grove/rgb_lcd.h	/^  uint8_t _displaymode;$/;"	m	class:rgb_lcd
_initialized	main/lib/grove/rgb_lcd.h	/^  uint8_t _initialized;$/;"	m	class:rgb_lcd
_numlines	main/lib/grove/rgb_lcd.h	/^  uint8_t _numlines,_currline;$/;"	m	class:rgb_lcd
action	main/lib/nav/nav.h	/^enum action$/;"	g
addListener	main/lib/eventmanager/EventManager.cpp	/^boolean EventManager::ListenerList::addListener( int eventCode, EventListener* listener ) $/;"	f	class:EventManager::ListenerList
addListener	main/lib/eventmanager/EventManager.h	/^inline boolean EventManager::addListener( int eventCode, EventListener* listener )$/;"	f	class:EventManager
adjustSpeed	main/lib/motor/motor.cpp	/^void motor::adjustSpeed(int speed)$/;"	f	class:motor
autoscroll	main/lib/grove/rgb_lcd.cpp	/^void rgb_lcd::autoscroll(void)$/;"	f	class:rgb_lcd
begin	main/lib/grove/rgb_lcd.cpp	/^void rgb_lcd::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) $/;"	f	class:rgb_lcd
black	main/lib/legacy/photoLineDetection.h	/^	int black;$/;"	m	struct:PhotoThresholdValues
blink	main/lib/grove/rgb_lcd.cpp	/^void rgb_lcd::blink()$/;"	f	class:rgb_lcd
calibrate	main/lib/legacy/photoLineDetection.cpp	/^void PhotoLineDetection::calibrate(int calibrate_color)$/;"	f	class:PhotoLineDetection
calibrate	main/lib/sensing/sensor.cpp	/^void Sensor::calibrate(int color)$/;"	f	class:Sensor
callback	main/lib/eventmanager/EventManager.h	/^            EventListener*	callback;		\/\/ The listener function$/;"	m	struct:EventManager::ListenerList::ListenerItem
checkSensor	main/lib/legacy/photoLineDetection.cpp	/^int PhotoLineDetection::checkSensor()$/;"	f	class:PhotoLineDetection
checkTaskComplete	main/lib/nav/nav.cpp	/^int nav::checkTaskComplete() $/;"	f	class:nav
check_validity	main/lib/nav/nav.cpp	/^bool nav::check_validity(grid coordinates)$/;"	f	class:nav
clamp	main/lib/pid/pid.cpp	/^void PID::clamp(int& parameter) {$/;"	f	class:PID
clear	main/lib/grove/rgb_lcd.cpp	/^void rgb_lcd::clear()$/;"	f	class:rgb_lcd
code	main/lib/eventmanager/EventManager.h	/^            int code;	\/\/ each event is represented by an integer code$/;"	m	struct:EventManager::EventQueue::EventElement
color_define	main/lib/grove/rgb_lcd.cpp	/^const unsigned char color_define[4][3] = $/;"	v
command	main/lib/grove/rgb_lcd.cpp	/^inline void rgb_lcd::command(uint8_t value)$/;"	f	class:rgb_lcd
compute	main/lib/pid/pid.cpp	/^bool PID::compute() {$/;"	f	class:PID
computeRectilinearPath	main/lib/nav/nav.cpp	/^int nav::computeRectilinearPath(grid new_destination)$/;"	f	class:nav
createChar	main/lib/grove/rgb_lcd.cpp	/^void rgb_lcd::createChar(uint8_t location, uint8_t charmap[])$/;"	f	class:rgb_lcd
currentAction	main/lib/nav/nav.h	/^		action currentAction;$/;"	m	class:nav
currentGrid	main/lib/nav/nav.h	/^		grid currentGrid;$/;"	m	class:nav
cursor	main/lib/grove/rgb_lcd.cpp	/^void rgb_lcd::cursor() {$/;"	f	class:rgb_lcd
cycle_time	main/lib/pid/pid.h	/^		unsigned int cycle_time;	\/\/ 100ms 0.1s$/;"	m	class:PID
d	main/lib/nav/nav.h	/^	int d;	\/\/ 0 to 359, N:0, E:90, S:180, W:270$/;"	m	struct:grid
destination	main/lib/nav/nav.h	/^		grid destination;$/;"	m	class:nav
detect	main/lib/legacy/photoLineDetection.cpp	/^int PhotoLineDetection::detect()$/;"	f	class:PhotoLineDetection
detect	main/lib/sensing/irsensor.cpp	/^int IRSensor::detect(int diffThresh)$/;"	f	class:IRSensor
detect	main/lib/sensing/sensor.cpp	/^int Sensor::detect()$/;"	f	class:Sensor
direction	main/lib/motor/motor.h	/^		int direction;$/;"	m	class:motor
direction	motor_test/src/motor.h	/^		int direction;$/;"	m	class:Motor
directionalLineIncrement	main/lib/nav/nav.cpp	/^grid nav::directionalLineIncrement(int i)$/;"	f	class:nav
display	main/lib/grove/rgb_lcd.cpp	/^void rgb_lcd::display() {$/;"	f	class:rgb_lcd
do_now	main/lib/nav/nav.h	/^	action do_now;$/;"	m	struct:task
enable	main/lib/motor/motor.h	/^		int enable;$/;"	m	class:motor
enable	motor_test/src/motor.h	/^		int enable;$/;"	m	class:Motor
enableDefaultListener	main/lib/eventmanager/EventManager.cpp	/^void EventManager::ListenerList::enableDefaultListener( boolean enable ) $/;"	f	class:EventManager::ListenerList
enableDefaultListener	main/lib/eventmanager/EventManager.h	/^inline void EventManager::enableDefaultListener( boolean enable )$/;"	f	class:EventManager
enableListener	main/lib/eventmanager/EventManager.cpp	/^boolean EventManager::ListenerList::enableListener( int eventCode, EventListener* listener, boolean enable ) $/;"	f	class:EventManager::ListenerList
enableListener	main/lib/eventmanager/EventManager.h	/^inline boolean EventManager::enableListener( int eventCode, EventListener* listener, boolean enable )$/;"	f	class:EventManager
enabled	main/lib/eventmanager/EventManager.h	/^            boolean			enabled;			\/\/ Each listener can be enabled or disabled$/;"	m	struct:EventManager::ListenerList::ListenerItem
eventCode	main/lib/eventmanager/EventManager.h	/^            int				eventCode;		\/\/ The event code$/;"	m	struct:EventManager::ListenerList::ListenerItem
f	main/lib/eventmanager/EventManager.h	/^    F* f;$/;"	m	class:GenericCallable
f	main/lib/eventmanager/EventManager.h	/^    memberf_pointer f;$/;"	m	class:MemberFunctionCallable
getAction	main/lib/nav/nav.cpp	/^action nav::getAction() { return currentAction; }$/;"	f	class:nav
getGrid	main/lib/nav/nav.cpp	/^grid nav::getGrid() { return currentGrid; }$/;"	f	class:nav
getNumEntries	main/lib/eventmanager/EventManager.h	/^inline int EventManager::ListenerList::getNumEntries() $/;"	f	class:EventManager::ListenerList
getNumEvents	main/lib/eventmanager/EventManager.h	/^inline int EventManager::EventQueue::getNumEvents() $/;"	f	class:EventManager::EventQueue
getNumEventsInQueue	main/lib/eventmanager/EventManager.h	/^inline int EventManager::getNumEventsInQueue( EventPriority pri ) $/;"	f	class:EventManager
getValue	main/lib/sensing/sensor.cpp	/^int Sensor::getValue()$/;"	f	class:Sensor
get_onoff	main/lib/pid/pid.cpp	/^bool PID::get_onoff() const {return on;}$/;"	f	class:PID
get_response	main/lib/pid/pid.cpp	/^bool PID::get_response() const {return response;}$/;"	f	class:PID
get_status	main/lib/motor/motor.cpp	/^motor_states motor::get_status() $/;"	f	class:motor
get_status	motor_test/src/motor.cpp	/^motor_states Motor::get_status() $/;"	f	class:Motor
grid	main/lib/nav/nav.h	/^struct grid$/;"	s
high	main/lib/pid/pid.h	/^		int low, high;$/;"	m	class:PID
home	main/lib/grove/rgb_lcd.cpp	/^void rgb_lcd::home()$/;"	f	class:rgb_lcd
hopperEast	main/lib/nav/nav.h	/^		grid hopperEast;$/;"	m	class:nav
hopperWest	main/lib/nav/nav.h	/^		grid hopperWest;$/;"	m	class:nav
i2c_send_byte	main/lib/grove/rgb_lcd.cpp	/^void i2c_send_byte(unsigned char dta)$/;"	f
i2c_send_byteS	main/lib/grove/rgb_lcd.cpp	/^void i2c_send_byteS(unsigned char *dta, unsigned char len)$/;"	f
input	main/lib/pid/pid.h	/^		const int* input;$/;"	m	class:PID
input_prev	main/lib/pid/pid.h	/^		int integral, input_prev;$/;"	m	class:PID
integral	main/lib/pid/pid.h	/^		int integral, input_prev;$/;"	m	class:PID
interrupt	main/lib/nav/nav.cpp	/^int nav::interrupt(isr action)$/;"	f	class:nav
interrupt	main/lib/nav/nav.cpp	/^int nav::interrupt(isr senInt)$/;"	f	class:nav
isEmpty	main/lib/eventmanager/EventManager.h	/^inline boolean EventManager::EventQueue::isEmpty() $/;"	f	class:EventManager::EventQueue
isEmpty	main/lib/eventmanager/EventManager.h	/^inline boolean EventManager::ListenerList::isEmpty() $/;"	f	class:EventManager::ListenerList
isEventQueueEmpty	main/lib/eventmanager/EventManager.h	/^inline boolean EventManager::isEventQueueEmpty( EventPriority pri )$/;"	f	class:EventManager
isEventQueueFull	main/lib/eventmanager/EventManager.h	/^inline boolean EventManager::isEventQueueFull( EventPriority pri ) $/;"	f	class:EventManager
isFull	main/lib/eventmanager/EventManager.h	/^inline boolean EventManager::EventQueue::isFull() $/;"	f	class:EventManager::EventQueue
isFull	main/lib/eventmanager/EventManager.h	/^inline boolean EventManager::ListenerList::isFull() $/;"	f	class:EventManager::ListenerList
isListenerEnabled	main/lib/eventmanager/EventManager.cpp	/^boolean EventManager::ListenerList::isListenerEnabled( int eventCode, EventListener* listener ) $/;"	f	class:EventManager::ListenerList
isListenerEnabled	main/lib/eventmanager/EventManager.h	/^inline boolean EventManager::isListenerEnabled( int eventCode, EventListener* listener )$/;"	f	class:EventManager
isListenerListEmpty	main/lib/eventmanager/EventManager.h	/^inline boolean EventManager::isListenerListEmpty()$/;"	f	class:EventManager
isListenerListFull	main/lib/eventmanager/EventManager.h	/^inline boolean EventManager::isListenerListFull()$/;"	f	class:EventManager
isr	main/lib/nav/nav.h	/^enum isr$/;"	g
kEventAnalog0	main/lib/eventmanager/EventManager.h	/^        kEventAnalog0,$/;"	e	enum:EventManager::EventType
kEventAnalog1	main/lib/eventmanager/EventManager.h	/^        kEventAnalog1,$/;"	e	enum:EventManager::EventType
kEventAnalog2	main/lib/eventmanager/EventManager.h	/^        kEventAnalog2,$/;"	e	enum:EventManager::EventType
kEventAnalog3	main/lib/eventmanager/EventManager.h	/^        kEventAnalog3,$/;"	e	enum:EventManager::EventType
kEventAnalog4	main/lib/eventmanager/EventManager.h	/^        kEventAnalog4,$/;"	e	enum:EventManager::EventType
kEventAnalog5	main/lib/eventmanager/EventManager.h	/^        kEventAnalog5,$/;"	e	enum:EventManager::EventType
kEventCalibrate	main/lib/eventmanager/EventManager.h	/^		kEventCalibrate,$/;"	e	enum:EventManager::EventType
kEventChar	main/lib/eventmanager/EventManager.h	/^        kEventChar,$/;"	e	enum:EventManager::EventType
kEventDisplayLCD	main/lib/eventmanager/EventManager.h	/^		kEventDisplayLCD,$/;"	e	enum:EventManager::EventType
kEventDisplaySerial	main/lib/eventmanager/EventManager.h	/^		kEventDisplaySerial,$/;"	e	enum:EventManager::EventType
kEventKeyPress	main/lib/eventmanager/EventManager.h	/^        kEventKeyPress,$/;"	e	enum:EventManager::EventType
kEventKeyRelease	main/lib/eventmanager/EventManager.h	/^        kEventKeyRelease,$/;"	e	enum:EventManager::EventType
kEventLineISR	main/lib/eventmanager/EventManager.h	/^		kEventLineISR,$/;"	e	enum:EventManager::EventType
kEventMoveForward	main/lib/eventmanager/EventManager.h	/^		kEventMoveForward$/;"	e	enum:EventManager::EventType
kEventNone	main/lib/eventmanager/EventManager.h	/^        kEventNone = 200,$/;"	e	enum:EventManager::EventType
kEventPaint	main/lib/eventmanager/EventManager.h	/^        kEventPaint,$/;"	e	enum:EventManager::EventType
kEventQueueSize	main/lib/eventmanager/EventManager.h	/^        static const int kEventQueueSize = EVENTMANAGER_EVENT_QUEUE_SIZE;$/;"	m	class:EventManager::EventQueue
kEventSensorPolling	main/lib/eventmanager/EventManager.h	/^		kEventSensorPolling,$/;"	e	enum:EventManager::EventType
kEventSerial	main/lib/eventmanager/EventManager.h	/^        kEventSerial,$/;"	e	enum:EventManager::EventType
kEventTime	main/lib/eventmanager/EventManager.h	/^        kEventTime,$/;"	e	enum:EventManager::EventType
kEventTimer0	main/lib/eventmanager/EventManager.h	/^        kEventTimer0,$/;"	e	enum:EventManager::EventType
kEventTimer1	main/lib/eventmanager/EventManager.h	/^        kEventTimer1,$/;"	e	enum:EventManager::EventType
kEventTimer2	main/lib/eventmanager/EventManager.h	/^        kEventTimer2,$/;"	e	enum:EventManager::EventType
kEventTimer3	main/lib/eventmanager/EventManager.h	/^        kEventTimer3,$/;"	e	enum:EventManager::EventType
kHighPriority	main/lib/eventmanager/EventManager.h	/^    enum EventPriority { kHighPriority, kLowPriority };$/;"	e	enum:EventManager::EventPriority
kInterruptSafe	main/lib/eventmanager/EventManager.h	/^    enum SafetyMode { kNotInterruptSafe, kInterruptSafe };$/;"	e	enum:EventManager::SafetyMode
kLowPriority	main/lib/eventmanager/EventManager.h	/^    enum EventPriority { kHighPriority, kLowPriority };$/;"	e	enum:EventManager::EventPriority
kMaxListeners	main/lib/eventmanager/EventManager.h	/^        static const int kMaxListeners = EVENTMANAGER_LISTENER_LIST_SIZE;$/;"	m	class:EventManager::ListenerList
kNotInterruptSafe	main/lib/eventmanager/EventManager.h	/^    enum SafetyMode { kNotInterruptSafe, kInterruptSafe };$/;"	e	enum:EventManager::SafetyMode
kd	main/lib/pid/pid.h	/^		double kp, ki, kd;$/;"	m	class:PID
ki	main/lib/pid/pid.h	/^		double kp, ki, kd;$/;"	m	class:PID
kp	main/lib/pid/pid.h	/^		double kp, ki, kd;$/;"	m	class:PID
left	main/lib/motor/motor.cpp	/^void motor::left(int speed)$/;"	f	class:motor
left	motor_test/src/motor.cpp	/^void Motor::left(int speed)$/;"	f	class:Motor
leftToRight	main/lib/grove/rgb_lcd.cpp	/^void rgb_lcd::leftToRight(void)$/;"	f	class:rgb_lcd
low	main/lib/pid/pid.h	/^		int low, high;$/;"	m	class:PID
mDefaultCallback	main/lib/eventmanager/EventManager.h	/^        EventListener* mDefaultCallback;$/;"	m	class:EventManager::ListenerList
mDefaultCallbackEnabled	main/lib/eventmanager/EventManager.h	/^        boolean mDefaultCallbackEnabled;$/;"	m	class:EventManager::ListenerList
mEventQueue	main/lib/eventmanager/EventManager.h	/^        EventElement mEventQueue[ kEventQueueSize ];$/;"	m	class:EventManager::EventQueue
mEventQueueHead	main/lib/eventmanager/EventManager.h	/^        int mEventQueueHead;$/;"	m	class:EventManager::EventQueue
mEventQueueTail	main/lib/eventmanager/EventManager.h	/^        int mEventQueueTail;$/;"	m	class:EventManager::EventQueue
mHighPriorityQueue	main/lib/eventmanager/EventManager.h	/^    EventQueue 	mHighPriorityQueue;$/;"	m	class:EventManager
mInterruptSafeMode	main/lib/eventmanager/EventManager.h	/^        boolean mInterruptSafeMode;$/;"	m	class:EventManager::EventQueue
mListeners	main/lib/eventmanager/EventManager.h	/^        ListenerItem mListeners[ kMaxListeners ];$/;"	m	class:EventManager::ListenerList
mListeners	main/lib/eventmanager/EventManager.h	/^    ListenerList		mListeners;$/;"	m	class:EventManager
mLowPriorityQueue	main/lib/eventmanager/EventManager.h	/^    EventQueue 	mLowPriorityQueue;$/;"	m	class:EventManager
mNumEvents	main/lib/eventmanager/EventManager.h	/^        int mNumEvents;$/;"	m	class:EventManager::EventQueue
mNumListeners	main/lib/eventmanager/EventManager.h	/^        int mNumListeners;$/;"	m	class:EventManager::ListenerList
mapLinePid	main/lib/pid/line_pid.cpp	/^int mapLinePid(bool l, bool m, bool r) $/;"	f
memberf_pointer	main/lib/eventmanager/EventManager.h	/^    typedef void (C::*memberf_pointer)(int, int);$/;"	t	class:MemberFunctionCallable
motor	main/lib/motor/motor.cpp	/^motor::motor(int pin_enable, int pin_direction)$/;"	f	class:motor
motor	main/lib/motor/motor.h	/^class motor$/;"	c
motor_states	main/lib/motor/motor.h	/^enum motor_states$/;"	g
motor_states	motor_test/src/motor.h	/^enum motor_states$/;"	g
nav	main/lib/nav/nav.cpp	/^nav::nav(grid start_position)$/;"	f	class:nav
nav	main/lib/nav/nav.h	/^class nav$/;"	c
noAutoscroll	main/lib/grove/rgb_lcd.cpp	/^void rgb_lcd::noAutoscroll(void)$/;"	f	class:rgb_lcd
noBlink	main/lib/grove/rgb_lcd.cpp	/^void rgb_lcd::noBlink()$/;"	f	class:rgb_lcd
noCursor	main/lib/grove/rgb_lcd.cpp	/^void rgb_lcd::noCursor()$/;"	f	class:rgb_lcd
noDisplay	main/lib/grove/rgb_lcd.cpp	/^void rgb_lcd::noDisplay()$/;"	f	class:rgb_lcd
numCyclesTrack	main/lib/sensing/irsensor.h	/^		int numCyclesTrack;$/;"	m	class:IRSensor
numListeners	main/lib/eventmanager/EventManager.cpp	/^int EventManager::ListenerList::numListeners()$/;"	f	class:EventManager::ListenerList
numListeners	main/lib/eventmanager/EventManager.cpp	/^int EventManager::numListeners()$/;"	f	class:EventManager
obj	main/lib/eventmanager/EventManager.h	/^    C* obj;$/;"	m	class:MemberFunctionCallable
on	main/lib/pid/pid.h	/^		bool on;$/;"	m	class:PID
on_grid	main/lib/nav/nav.h	/^		bool on_grid;$/;"	m	class:nav
operator ()	main/lib/eventmanager/EventManager.h	/^    virtual void operator()( int eventCode, int eventParam )$/;"	f	class:GenericCallable
operator ()	main/lib/eventmanager/EventManager.h	/^    virtual void operator()( int eventCode, int eventParam )$/;"	f	class:MemberFunctionCallable
operator ==	main/lib/nav/nav.h	/^	bool operator==(const grid& a) const$/;"	f	struct:grid
output	main/lib/pid/pid.h	/^		int* output;$/;"	m	class:PID
param	main/lib/eventmanager/EventManager.h	/^            int param;	\/\/ each event has a single integer parameter$/;"	m	struct:EventManager::EventQueue::EventElement
pastEncounters	main/lib/sensing/irsensor.cpp	/^int pastEncounters()$/;"	f
popEvent	main/lib/eventmanager/EventManager.cpp	/^boolean EventManager::EventQueue::popEvent( int* eventCode, int* eventParam ) $/;"	f	class:EventManager::EventQueue
prevState	main/lib/sensing/irsensor.h	/^		int prevState;$/;"	m	class:IRSensor
processAllEvents	main/lib/eventmanager/EventManager.cpp	/^int EventManager::processAllEvents() $/;"	f	class:EventManager
processEvent	main/lib/eventmanager/EventManager.cpp	/^int EventManager::processEvent() $/;"	f	class:EventManager
queueEvent	main/lib/eventmanager/EventManager.cpp	/^boolean EventManager::EventQueue::queueEvent( int eventCode, int eventParam ) $/;"	f	class:EventManager::EventQueue
queueEvent	main/lib/eventmanager/EventManager.h	/^inline boolean EventManager::queueEvent( int eventCode, int eventParam, EventPriority pri ) $/;"	f	class:EventManager
readSensor	main/lib/sensing/sensor.cpp	/^int Sensor::readSensor()$/;"	f	class:Sensor
red	main/lib/legacy/photoLineDetection.h	/^	int red;$/;"	m	struct:PhotoThresholdValues
reinitialize	main/lib/pid/pid.cpp	/^void PID::reinitialize() {$/;"	f	class:PID
removeDefaultListener	main/lib/eventmanager/EventManager.cpp	/^void EventManager::ListenerList::removeDefaultListener() $/;"	f	class:EventManager::ListenerList
removeDefaultListener	main/lib/eventmanager/EventManager.h	/^inline void EventManager::removeDefaultListener()$/;"	f	class:EventManager
removeListener	main/lib/eventmanager/EventManager.cpp	/^boolean EventManager::ListenerList::removeListener( int eventCode, EventListener* listener ) $/;"	f	class:EventManager::ListenerList
removeListener	main/lib/eventmanager/EventManager.cpp	/^int EventManager::ListenerList::removeListener( EventListener* listener ) $/;"	f	class:EventManager::ListenerList
removeListener	main/lib/eventmanager/EventManager.h	/^inline boolean EventManager::removeListener( int eventCode, EventListener* listener )$/;"	f	class:EventManager
removeListener	main/lib/eventmanager/EventManager.h	/^inline int EventManager::removeListener( EventListener* listener )$/;"	f	class:EventManager
reset	main/lib/nav/nav.cpp	/^int nav::reset(grid new_position)$/;"	f	class:nav
response	main/lib/pid/pid.h	/^		bool response;$/;"	m	class:PID
rgb_lcd	main/lib/grove/rgb_lcd.cpp	/^rgb_lcd::rgb_lcd()$/;"	f	class:rgb_lcd
rgb_lcd	main/lib/grove/rgb_lcd.h	/^class rgb_lcd : public Print $/;"	c
right	main/lib/motor/motor.cpp	/^void motor::right(int speed)$/;"	f	class:motor
right	motor_test/src/motor.cpp	/^void Motor::right(int speed)$/;"	f	class:Motor
rightToLeft	main/lib/grove/rgb_lcd.cpp	/^void rgb_lcd::rightToLeft(void)$/;"	f	class:rgb_lcd
scrollDisplayLeft	main/lib/grove/rgb_lcd.cpp	/^void rgb_lcd::scrollDisplayLeft(void)$/;"	f	class:rgb_lcd
scrollDisplayRight	main/lib/grove/rgb_lcd.cpp	/^void rgb_lcd::scrollDisplayRight(void)$/;"	f	class:rgb_lcd
searchEventCode	main/lib/eventmanager/EventManager.cpp	/^int EventManager::ListenerList::searchEventCode( int eventCode ) $/;"	f	class:EventManager::ListenerList
searchListeners	main/lib/eventmanager/EventManager.cpp	/^int EventManager::ListenerList::searchListeners( EventListener* listener ) $/;"	f	class:EventManager::ListenerList
searchListeners	main/lib/eventmanager/EventManager.cpp	/^int EventManager::ListenerList::searchListeners( int eventCode, EventListener* listener ) $/;"	f	class:EventManager::ListenerList
sendEvent	main/lib/eventmanager/EventManager.cpp	/^int EventManager::ListenerList::sendEvent( int eventCode, int param ) $/;"	f	class:EventManager::ListenerList
sensorPin	main/lib/legacy/photoLineDetection.h	/^		int sensorPin;$/;"	m	class:PhotoLineDetection
sensorPin	main/lib/sensing/sensor.h	/^		int sensorPin;$/;"	m	class:Sensor
sensorVal	main/lib/sensing/sensor.h	/^		int sensorVal;$/;"	m	class:Sensor
sensor_h	main/lib/sensing/sensor.h	7;"	d
sensor_thresh	main/lib/legacy/photoLineDetection.h	/^		int sensor_thresh;$/;"	m	class:PhotoLineDetection
sensor_value	main/lib/legacy/photoLineDetection.h	/^		int sensor_value;$/;"	m	class:PhotoLineDetection
setColor	main/lib/grove/rgb_lcd.cpp	/^void rgb_lcd::setColor(unsigned char color)$/;"	f	class:rgb_lcd
setColorAll	main/lib/grove/rgb_lcd.h	/^  void setColorAll(){setRGB(0, 0, 0);}$/;"	f	class:rgb_lcd
setColorWhite	main/lib/grove/rgb_lcd.h	/^  void setColorWhite(){setRGB(255, 255, 255);}$/;"	f	class:rgb_lcd
setCursor	main/lib/grove/rgb_lcd.cpp	/^void rgb_lcd::setCursor(uint8_t col, uint8_t row)$/;"	f	class:rgb_lcd
setDefaultListener	main/lib/eventmanager/EventManager.cpp	/^boolean EventManager::ListenerList::setDefaultListener( EventListener* listener ) $/;"	f	class:EventManager::ListenerList
setDefaultListener	main/lib/eventmanager/EventManager.h	/^inline boolean EventManager::setDefaultListener( EventListener* listener )$/;"	f	class:EventManager
setPWM	main/lib/grove/rgb_lcd.h	/^  void setPWM(unsigned char color, unsigned char pwm){setReg(color, pwm);}      \/\/ set pwm$/;"	f	class:rgb_lcd
setRGB	main/lib/grove/rgb_lcd.cpp	/^void rgb_lcd::setRGB(unsigned char r, unsigned char g, unsigned char b)$/;"	f	class:rgb_lcd
setReg	main/lib/grove/rgb_lcd.cpp	/^void rgb_lcd::setReg(unsigned char addr, unsigned char dta)$/;"	f	class:rgb_lcd
setThresh	main/lib/sensing/sensor.cpp	/^void Sensor::setThresh(int* values)$/;"	f	class:Sensor
set_cycle	main/lib/pid/pid.cpp	/^void PID::set_cycle(unsigned int new_cycle_time) {$/;"	f	class:PID
set_destination	main/lib/nav/nav.cpp	/^int nav::set_destination(grid new_destination)$/;"	f	class:nav
set_limits	main/lib/pid/pid.cpp	/^void PID::set_limits(int l, int h) {$/;"	f	class:PID
set_response	main/lib/pid/pid.cpp	/^void PID::set_response(bool r) {$/;"	f	class:PID
setpoint	main/lib/pid/pid.h	/^		const int* setpoint;$/;"	m	class:PID
start	main/lib/pid/pid.cpp	/^void PID::start() {$/;"	f	class:PID
startTask	main/lib/nav/nav.cpp	/^void startTask()$/;"	f
status	main/lib/motor/motor.h	/^		motor_states status;$/;"	m	class:motor
status	motor_test/src/motor.h	/^		motor_states status;$/;"	m	class:Motor
stop	main/lib/motor/motor.cpp	/^void motor::stop()$/;"	f	class:motor
stop	main/lib/pid/pid.cpp	/^void PID::stop() {on = 0;}$/;"	f	class:PID
stop	motor_test/src/motor.cpp	/^void Motor::stop()$/;"	f	class:Motor
task	main/lib/nav/nav.h	/^struct task$/;"	s
taskdestination	main/lib/nav/nav.h	/^		grid taskdestination;$/;"	m	class:nav
tasklist	main/lib/nav/nav.h	/^		std::queue<task> tasklist;$/;"	m	class:nav
tasksLeft	main/lib/nav/nav.cpp	/^int nav::tasksLeft() { return tasklist.size(); }$/;"	f	class:nav
thresh	main/lib/legacy/photoLineDetection.h	/^		PhotoThresholdValues thresh;$/;"	m	class:PhotoLineDetection
thresh	main/lib/sensing/sensor.h	/^		int thresh[3];$/;"	m	class:Sensor
time_prev	main/lib/pid/pid.h	/^		unsigned long time_prev;$/;"	m	class:PID
tune	main/lib/pid/pid.cpp	/^void PID::tune(double p, double i, double d) {$/;"	f	class:PID
value	main/lib/nav/nav.h	/^	int value;$/;"	m	struct:task
white	main/lib/legacy/photoLineDetection.h	/^	int white;$/;"	m	struct:PhotoThresholdValues
write	main/lib/grove/rgb_lcd.cpp	/^inline size_t rgb_lcd::write(uint8_t value)$/;"	f	class:rgb_lcd
x	main/lib/nav/nav.h	/^	int x;	\/\/ x coordinates$/;"	m	struct:grid
y	main/lib/nav/nav.h	/^	int y;  \/\/ y coordinates$/;"	m	struct:grid
