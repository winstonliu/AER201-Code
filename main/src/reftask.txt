	// Initialize tasks
	int navVal = tkNav->getTaskValue();
	grid navGrid = tkNav->getGrid();
	switch (tkNav->getMotion())
	{
		case PAUSE:
			timer = navVal;
			FLAG_pause = true;
			tkDriver->stop();
			break;
		case MOVEONGRID:
			tkDriver->driveStraight();
			tkdest = dirLineInc(navVal);
			break;
		case OFFGRIDRETURN:
			if (navVal > 0)
				internalcount = navVal;
		case MOVEINREVERSE:
			//timer = navVal;
			tkDriver->driveReverse();
			break;
		case OFFGRIDOUTBOUND:
			//predockingheading = tkNav->offgridpos.d;
			tkDriver->driveStraight();
			break;
		case HOPPERALIGN:
			tkDriver->driveStraight();
			break;
		case ROTATEONGRID:
			tkdest = navGrid;
			tkdest.d = navVal;
		case ROTATEOFFGRID:
			// Determine direction of rotation
			// Normalize current heading	
			navVal = (navVal - navGrid.d) % 360;
			if (navVal > 180) 
				tkDriver->turnLeft();
			else
				tkDriver->turnRight();
			break;
		case CLAWRETRACT:
			tkClarm->left(clarm_pwm);
			wheel_pwm = 0;
			break;
		case CLAWEXTEND:
			tkClarm->right(clarm_pwm);
			wheel_pwm = 0;
			timer = navVal;
			break;
		case GAMEBOARDALIGN:
			tkDriver->pivotLeftReverse();
			break;
		// Grid ON, OFF	
		case GOONGRID:
			tkNav->on_grid = true;
			break;
		case GOOFFGRID:
			tkNav->on_grid = false;
			break;
	}
	alfd = tkdest;
	gg = navVal;
}

	int baseSpeed = 255;
	// Non-time critical things that need to be done in the loop
	switch (tkNav->getMotion())
	{
		case MOVEONGRID:
			MOG::processTask();
			break;
		case ROTATEOFFGRID:
		case OFFGRIDOUTBOUND:
			// Update off grid position
			//tkNav->offgridpos = calcOffGrid(tkNav->offgridpos);
			break;
		case MOVEINREVERSE:
			tkDriver->driveReverse();
			break;
	}
}

int interrupt(sensors senInt)
{
	motions currentTask = tkNav->getMotion();
	switch(senInt)
	{
		// Forward drive intersects line
		case LINE_ISR:
			if (currentTask == MOVEONGRID)
			{
				tkNav->resetOffGridToZero();
				tkNav->setGrid(dirLineInc(1));
			}
			else if (currentTask == ROTATEONGRID)
			{
				// Calculating 
				grid new_grid = tkNav->getGrid();
				if (tkDriver->get_status() == TURNINGLEFT)
					new_grid.d = (360 + new_grid.d - 90) % 360;
				else if (tkDriver->get_status() == TURNINGRIGHT)
					new_grid.d = (360 + new_grid.d + 90) % 360;
				tkNav->setGrid(new_grid);
			}
		case CLAW_TOUCH:
			if (currentTask == CLAWRETRACT)
			{
				// kill claw motor		
				tkClarm->stop();
				FLAG_clawextended = false;
			}
			break
		case BOARD_TOUCH:
			tkDriver->stop();
			FLAG_dockedboard = true;
			break;
		case HOPPER_TOUCH_LEFT:
			// Stop if both have touched, else pivot
			if (currentTask == HOPPERALIGN)
			{
				if (FLAG_hopperright == true)
					tkDriver->stop();
				else
					tkDriver->pivotLeft();
			}
			break;
		case HOPPER_TOUCH_RIGHT:
			// Stop if both have touched, else pivot
			if (currentTask == HOPPERALIGN)
			{
				if (FLAG_hopperleft == true)
					tkDriver->stop();
				else
					tkDriver->pivotRight();
			}
			break;
		case TIMER:
			if (currentTask == PAUSE) 
			{
				FLAG_pause = false;
			}
			else if (currentTask == CLAWEXTEND)
			{
				tkClarm->stop();
				FLAG_clawextended = true;
			}
			else if (currentTask == MOVEINREVERSE)
			{
				tkDriver->stop();
			}
			break;
	}
}

	bool advance = false;
	int navVal = tkNav->getTaskValue();
	grid gridNow = tkNav->getGrid();
	
	// Checks for tk completion
	switch (tkNav->getMotion())
	{
		case PAUSE:
			if (FLAG_pause == false) advance = true;	
			break;
		case MOVEONGRID:
			if (tkNav->currentGrid.x == tkdest.x &&
					tkNav->currentGrid.y == tkdest.y)
				advance = true;
			break;
		case MOVEINREVERSE:
			if (tkDriver->get_status() == STOPPED && tkNav->timeElapsed() > 1000)
				advance = true;
			break;
		case ROTATEONGRID:
			if (gridNow == tkdest && tkNav->timeElapsed() > 2000) 
				advance = true;
			break;
		case ROTATEOFFGRID:
			if ((tkDriver->get_status() == TURNINGRIGHT 
					&& tkNav->offgridpos.d > navVal)
				|| (tkDriver->get_status() == TURNINGLEFT 
					&& tkNav->offgridpos.d < navVal))
			{
				advance = true;
			}
			if (tkNav->timeElapsed() > 1350)
				advance = true;
			break;
		case CLAWEXTEND: 
			if (FLAG_clawextended == true) 
			{ 
				tkWheel->left();
				wheel_pwm = 255;
				advance = true; 
			}
			break;
		case CLAWRETRACT:
			if (FLAG_clawextended == false) 
			{ 
				advance = true; 
			}
			break;
		case HOPPERALIGN:
			if ((FLAG_hopperleft && FLAG_hopperright) == true) 
			{
				tkDriver->stop();
				internalcount = floor(euclideanDist(tkNav->encStarboardCNT, 
						tkNav->encPortCNT));
				advance = true;
			}
			break;
		case GAMEBOARDALIGN:
			if (FLAG_dockedboard == true)
			{
				FLAG_dockedboard = false;
				advance = true;
			}
			break;
		case OFFGRIDOUTBOUND:
			if ((FLAG_hopperleft || FLAG_hopperright) == true && tkNav->timeElapsed() > 500) 
				advance = true;
			break;
		case OFFGRIDRETURN:
			if (internalcount <= floor(euclideanDist(tkNav->encStarboardCNT, 
					tkNav->encPortCNT)))
			{
				advance = true;
			}
			break;
		case MOVEINREVERSE:
			if (board_now == true && tkNav->timeElapsed() > 1500);
				advance = true;
			break;
		case GOOFFGRID:
		case GOONGRID:
			advance = true;
			break;
	}
	return advance;
}

